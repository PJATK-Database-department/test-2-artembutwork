// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test2.Models;

#nullable disable

namespace Test2.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Test2.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCar"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("integer");

                    b.HasKey("IdCar");

                    b.ToTable("Car", (string)null);

                    b.HasData(
                        new
                        {
                            IdCar = 1,
                            Name = "A",
                            ProductionYear = 2000
                        },
                        new
                        {
                            IdCar = 2,
                            Name = "B",
                            ProductionYear = 2001
                        },
                        new
                        {
                            IdCar = 3,
                            Name = "C",
                            ProductionYear = 2002
                        });
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.Property<int>("IdInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInspection"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdCar")
                        .HasColumnType("int");

                    b.Property<int>("IdMechanic")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.HasKey("IdInspection");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdMechanic");

                    b.ToTable("Inspection", (string)null);

                    b.HasData(
                        new
                        {
                            IdInspection = 1,
                            Comment = "123",
                            IdCar = 1,
                            IdMechanic = 1,
                            InspectionDate = new DateTime(2022, 6, 9, 9, 26, 58, 219, DateTimeKind.Local).AddTicks(58)
                        },
                        new
                        {
                            IdInspection = 2,
                            Comment = "123",
                            IdCar = 1,
                            IdMechanic = 2,
                            InspectionDate = new DateTime(2022, 6, 10, 9, 26, 58, 219, DateTimeKind.Local).AddTicks(92)
                        },
                        new
                        {
                            IdInspection = 3,
                            Comment = "123",
                            IdCar = 2,
                            IdMechanic = 2,
                            InspectionDate = new DateTime(2022, 6, 11, 9, 26, 58, 219, DateTimeKind.Local).AddTicks(96)
                        },
                        new
                        {
                            IdInspection = 4,
                            Comment = "123",
                            IdCar = 3,
                            IdMechanic = 3,
                            InspectionDate = new DateTime(2022, 6, 12, 9, 26, 58, 219, DateTimeKind.Local).AddTicks(99)
                        });
                });

            modelBuilder.Entity("Test2.Models.Mechanic", b =>
                {
                    b.Property<int>("IdMechanic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMechanic"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdMechanic");

                    b.ToTable("Mechanic", (string)null);

                    b.HasData(
                        new
                        {
                            IdMechanic = 1,
                            FirstName = "M1",
                            LastName = "1M"
                        },
                        new
                        {
                            IdMechanic = 2,
                            FirstName = "M2",
                            LastName = "2M"
                        },
                        new
                        {
                            IdMechanic = 3,
                            FirstName = "M3",
                            LastName = "3M"
                        });
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict", b =>
                {
                    b.Property<int>("IdServiceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServiceType"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,17)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdServiceType");

                    b.ToTable("ServiceTypeDict", (string)null);

                    b.HasData(
                        new
                        {
                            IdServiceType = 1,
                            Price = 100m,
                            ServiceType = "A"
                        },
                        new
                        {
                            IdServiceType = 2,
                            Price = 200m,
                            ServiceType = "B"
                        },
                        new
                        {
                            IdServiceType = 3,
                            Price = 300m,
                            ServiceType = "C"
                        });
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDictInspection", b =>
                {
                    b.Property<int>("IdServiceType")
                        .HasColumnType("int");

                    b.Property<int>("IdInspection")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("IdServiceType", "IdInspection");

                    b.HasIndex("IdInspection");

                    b.ToTable("ServiceTypeDict_Inspection", (string)null);

                    b.HasData(
                        new
                        {
                            IdServiceType = 1,
                            IdInspection = 1,
                            Comments = "123"
                        },
                        new
                        {
                            IdServiceType = 1,
                            IdInspection = 2,
                            Comments = "123"
                        },
                        new
                        {
                            IdServiceType = 2,
                            IdInspection = 3,
                            Comments = "123"
                        },
                        new
                        {
                            IdServiceType = 3,
                            IdInspection = 4,
                            Comments = "123"
                        });
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.HasOne("Test2.Models.Car", "IdCarNavigation")
                        .WithMany("Inspections")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test2.Models.Mechanic", "IdMechanicNavigation")
                        .WithMany("Inspections")
                        .HasForeignKey("IdMechanic")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdCarNavigation");

                    b.Navigation("IdMechanicNavigation");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDictInspection", b =>
                {
                    b.HasOne("Test2.Models.Inspection", "IdInspectionNavigation")
                        .WithMany("ServiceTypeDictInspections")
                        .HasForeignKey("IdInspection")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test2.Models.ServiceTypeDict", "IdServiceTypeDictNavigation")
                        .WithMany("ServiceTypeDictInspections")
                        .HasForeignKey("IdServiceType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdInspectionNavigation");

                    b.Navigation("IdServiceTypeDictNavigation");
                });

            modelBuilder.Entity("Test2.Models.Car", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.Navigation("ServiceTypeDictInspections");
                });

            modelBuilder.Entity("Test2.Models.Mechanic", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict", b =>
                {
                    b.Navigation("ServiceTypeDictInspections");
                });
#pragma warning restore 612, 618
        }
    }
}
